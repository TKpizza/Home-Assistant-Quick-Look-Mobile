climate:
  variables:
    entity:
    name:
    label: 
  show_icon: false
  show_name: false
  triggers_update: all
  styles:
      card:
        - height: 10.8vh
        - border-radius: 27px
        - cursor: none
        - --mdc-ripple-press-opacity: 0
        - box-shadow: none
        - background-color: |
            [[[
              if (!variables.entity) {
                return '#ECEFF6';
              }
              
              const state = states[variables.entity].state.toLowerCase();
              const attributes = states[variables.entity].attributes;
              const temperature = parseFloat(attributes.temperature);
              const currentTemperature = parseFloat(attributes.current_temperature);

              if (state === 'auto' || (state.includes('heat') && state.includes('cool'))) {
                if (temperature > currentTemperature) {
                  return '#FEE5C9';
                } else if (temperature < currentTemperature) {
                  return '#E5E9FF';
                } else {
                  return '#ECEFF6';
                }
              } else if (state.includes('heat')) {
                return '#FEE5C9';
              } else if (state.includes('cool') || state.includes('fan')) {
                return '#E5E9FF';
              } else if (state.includes('dry')) {
                return '#FCEDD1';
              } else {
                return '#ECEFF6';
              }
            ]]]
  custom_fields:
    buttons:
      card:
        type: horizontal-stack
        cards:
          - type: custom:button-card # ICON
            entity:  |
              [[[
                if (variables.input_select ) {
                  return variables.input_select;
                } else if (variables.entity ) {
                  return variables.entity;
                } else {
                    return 'null';
                }
              ]]]
            show_icon: |
              [[[
                if (variables.entity) {
                  const state = states[variables.entity].state;
                  const isFloat = !isNaN(state) && !isNaN(parseFloat(state));
                  
                  if (state !== 'off' && !isFloat) {
                      return false;
                  } else {
                      return true;
                  }
                } else {
                  return true;
                }
              ]]]
            icon:  |
              [[[                  
                if (variables.entity || variables.input_select) {
                  return 'mdi:thermometer';
                } else {
                  return 'mdi:help';
                }
              ]]]
            size: 50%
            show_name: |
              [[[
                  if (variables.entity) {
                      const state = states[variables.entity].state;
                      const isFloat = !isNaN(state) && !isNaN(parseFloat(state));
                      
                      if (state !== 'off' && !isFloat) {
                          return true;
                      } else {
                          return false;
                      }
                  } else {
                      return false;
                  }
              ]]]
            name: |
              [[[
                if (variables.entity) {
                  if (states[variables.entity].state !== 'off' ) {
                    return states[variables.entity].attributes.temperature + 'Â°';
                  } else {
                    return '';
                  } 
                } else {
                  return '';
                }
              ]]]
            styles:
              card:
                - height: 6vh
                - width: 6vh
                - background-color: |
                    [[[
                      if (!variables.entity) {
                        return '#D9D6D6';
                      }
                      
                      const state = states[variables.entity].state.toLowerCase();
                      const attributes = states[variables.entity].attributes;
                      const temperature = parseFloat(attributes.temperature);
                      const currentTemperature = parseFloat(attributes.current_temperature);

                      if (state === 'auto' || (state.includes('heat') && state.includes('cool'))) {
                        if (temperature > currentTemperature) {
                          return '#FFBB6E';
                        } else if (temperature < currentTemperature) {
                          return '#8AA3D8';
                        } else {
                          return '#D9D6D6';
                        }
                      } else if (state.includes('heat')) {
                        return '#FFBB6E';
                      } else if (state.includes('cool') || state.includes('fan')) {
                        return '#8AA3D8';
                      } else if (state.includes('dry')) {
                        return '#D3C09D';
                      } else {
                        return '#D9D6D6';
                      }
                    ]]]
                - border-radius: 50%
                - box-shadow: none
                - top: 1.6vh
                - left: 3.2vw
                - cursor: none 
                - --mdc-ripple-press-opacity: 0 
              icon:
                - color: '#F3F6FD'
              name:
                - color: '#F3F6FD'
                - font-size: 14px
                - font-weight: 800
            tap_action: |
              [[[
                if (variables.input_select) {
                  return {
                    action: 'more-info'
                  };
                } else {
                  return {
                    action: 'call-service',
                    service: variables.entity && states[variables.entity].state == 'off'
                            ? 'climate.turn_on'
                            : 'climate.turn_off',
                    service_data: {
                      entity_id: variables.entity
                    }
                  };
                }
              ]]]
          - type: custom:button-card # NAME
            entity: '[[[ return variables.entity ]]]'
            name:   |
              [[[
                if (variables.name) {
                  return variables.name;
                } else if (variables.entity) {
                    return states[variables.entity].attributes.friendly_name;
                } else {
                    return 'Name';
                }
              ]]]
            label:  |
              [[[
                if (!variables.entity) {
                  return "Label";
                }
                
                if (variables.label) {
                  return variables.label;
                } 
                
                const entityState = states[variables.entity];

                let temperature = entityState.attributes.current_temperature 
                                  || entityState.attributes.device_class === 'temperature' && entityState.state;

                return temperature 
                      ? parseFloat(temperature).toFixed(1) + ' Â°C' 
                      : 'Unavailable';
              ]]]
            show_icon: false
            show_label: true
            styles:
              card:
                - height: 10.8vh
                - width: 29.2vw
                - background-color: transparent
                - border-radius: 0%
                - box-shadow: none
                - top: -0.85vh
                - left: 1.0vw
                - cursor: none
                - --mdc-ripple-press-opacity: 0
              name: 
                - font-size: 14px
                - font-weight: 500
                - justify-self: start
                - padding-left: 4vw
              label: 
                - font-size: 12px
                - font-weight: 400
                - justify-self: start
                - padding-left: 4vw
                - padding-top: 0.5vh
